---
- name: Provision iTrust Server on AWS
  hosts: localhost
  vars:
    aws:
      region: us-east-1
      ec2:
        key:
          name: "csc519-iTrust2"
          private_key_file: "aws-private-iTrust2.pem"
        iTrust:
          # idempotent_id: "csc519-iTrust-{{ unique_id }}"
          # ubuntu 14.04 lts
          image_id: "ami-49c9295f"
          security_group:
            name: "csc519-iTrust2"
  tasks:

    - name: create ec2 key pair
      ec2_key:
        name:   "{{ aws.ec2.key.name }}"
        region: "{{ aws.region }}"
      register: ec2_key

    - name: save ec2 private key locally
      copy:
        content: "{{ ec2_key.key.private_key }}"
        dest: "/var/lib/jenkins/{{ aws.ec2.key.private_key_file }}"
        mode: 0600
      when: ec2_key.changed

    - name: create ec2 security group for iTrust
      ec2_group:
        name: "{{ aws.ec2.iTrust.security_group.name }}"
        description: iTrust
        rules:
          - proto: tcp
            ports: 8080
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0
          - proto: tcp
            ports: 22
            cidr_ip: 0.0.0.0/0
            cidr_ipv6: ::/0

    - name: provision ec2 instance for iTrust
      ec2:
        image: "{{ aws.ec2.iTrust.image_id }}"
        instance_type: t2.micro
        key_name: "{{ aws.ec2.key.name }}"
        group: "{{ aws.ec2.iTrust.security_group.name }}"
        region: "{{ aws.region }}"
        instance_tags:
          csc519: iTrust
        wait: true
      register: ec2

    - set_fact:
        iTrust_host: "{{ ec2.instances[0].public_ip }}"

    - name: wait for ssh to start on iTrust instance
      wait_for:
        host: "{{ iTrust_host }}"
        port: 22
        state: started

    - name: get ec2 host key
      shell: "ssh-keyscan {{ iTrust_host }}"
      register: ssh_keyscan

    - name: add ec2 instance to known_hosts
      known_hosts:
        name: "{{ iTrust_host }}"
        key: "{{ item }}"
      with_items: "{{ ssh_keyscan.stdout_lines }}"

    - name: add ec2 instance to in-memory inventory
      add_host:
        host: iTrust
        ansible_host: "{{ iTrust_host }}"
        # ansible_user: ec2-user
        ansible_user: ubuntu
        ansible_ssh_private_key_file: "/var/lib/jenkins/{{ aws.ec2.key.private_key_file }}"

- hosts: iTrust
  name: configuration play
  user: ubuntu
  become: true
  gather_facts: false
  tasks:
 
  - name: install python 2
    raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)
     
  - name: gather_facts
    setup:

- name: Configure iTrust server
  hosts: iTrust
  remote_user: ubuntu
  become: yes
  vars:
    mysql_account: "root"
    root_db_password: "qwe123"
    itrust_email_user: "itrustuser"
    itrust_email_password: "itrustnoone"
    packages:
      - python-dev
      - python-pip
      - python-setuptools
      - git-core
      - debconf-utils
      - maven3

  tasks:

    # Install all dependencies
    - name: Set up ppa for maven
      apt_repository:
        repo: 'ppa:andrei-pozolotin/maven3'
        state: "present"
      become: yes

    # Install Java 8
    - name: Add repo for Java 8
      apt_repository: repo='ppa:webupd8team/java' state=present
      become: yes

    - name: Add apt repository
      apt_repository:
        repo: 'ppa:webupd8team/java'
        state: present
        update_cache: yes
      become: yes
    
    - name: Accept license
      debconf:
        name: 'oracle-java8-installer'
        question: 'shared/accepted-oracle-license-v1-1'
        value: 'true'
        vtype: 'select'
      become: yes

    - name: Install java
      apt: name={{ item }} state=present
      with_items:
        - oracle-java8-installer
        - ca-certificates
        - oracle-java8-set-default
      become: yes

    # Install other dependencies
    - name: Install dependencies
      apt:
        pkg: "{{ item }}"
        state: "present"
        update_cache: yes
      with_items: "{{ packages }}"
      become: yes

    # Tomcat setup
    - name: add group "tomcat"
      group: name=tomcat
      become: yes

    - name: add user "tomcat"
      user: name=tomcat group=tomcat home=/usr/share/tomcat createhome=no
      become: yes

    - name: Check if application repository has already been cloned
      stat:
        path: "/opt/apache-tomcat-9.0.5.tar.gz"
      register: tomcat_tar

    - name: Download Tomcat
      get_url: url=http://www.trieuvan.com/apache/tomcat/tomcat-9/v9.0.5/bin/apache-tomcat-9.0.5.tar.gz dest=/opt/apache-tomcat-9.0.5.tar.gz
      become: yes
      when: tomcat_tar.stat.exists == False

    - name: Check if application repository has already been cloned
      stat:
        path: "/opt/apache-tomcat-9.0.5"
      register: tomcat

    - name: Extract archive
      command: chdir=/usr/share /bin/tar xvf /opt/apache-tomcat-9.0.5.tar.gz -C /opt/ creates=/opt/apache-tomcat-9.0.5
      become: yes
      when: tomcat.stat.exists == False

    - name: Symlink install directory
      file: src=/opt/apache-tomcat-9.0.5 path=/usr/share/tomcat state=link
      become: yes

    - name: Check if application repository has already been cloned
      stat:
        path: "{{ ansible_env.HOME }}/dev/iTrust2-v2"
      register: itrust_repo

    - name: Copy WAR to /opt/tomcat/webapps
      copy:
        src: /var/lib/jenkins/workspace/iTrust/iTrust2/target/iTrust2.war
        dest: /opt/apache-tomcat-9.0.5/webapps

    - name: Add MySQL Apt Key
      apt_key:
        keyserver: pgpkeys.mit.edu
        id: 5072E1F5

    - name: Add MySQL repository
      apt_repository: 
        repo: deb http://repo.mysql.com/apt/ubuntu/ trusty mysql-5.7    

    - name: Set root Password
      debconf:
        name: mysql-community-server
        question: 'mysql-community-server/root-pass'
        value: '{{ root_db_password }}' 
        vtype: password

    - name: Set root Password Again
      debconf:
        name: mysql-community-server
        question: 'mysql-community-server/re-root-pass'
        value: '{{ root_db_password }}'
        vtype: password

    - name: Install MySQL 5.7
      apt:
        pkg: '{{ item }}'
        state: present
        update_cache: true
      with_items:
        - mysql-server

    - name: Start MySQL
      service:
        name: mysql
        state: started

    - name: start tomcat
      become: yes
      command: nohup /opt/apache-tomcat-9.0.5/bin/startup.sh

    # for human-readable output, run with ANSIBLE_STDOUT_CALLBACK=debug
    - name: print some handy info
      debug:
        msg: |
          Jenkins URL:
            http://{{ ansible_host }}:8080"
    

